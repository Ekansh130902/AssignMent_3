import 'package:flutter/material.dart';

import 'package:dash_chat_2/dash_chat_2.dart';
import 'package:flutter_gemini/flutter_gemini.dart';
import 'package:test3/auth/login.dart';
import 'package:test3/consts/styles/style.dart';
import 'package:test3/services/instances/auth_services.dart';

class ChatBot extends StatefulWidget {
  const ChatBot({super.key});
  @override
  State<ChatBot> createState() => _ChatBotState();
}

String lastMessage1 = "";

class _ChatBotState extends State<ChatBot> {
  int cnt = 0;
  bool showSendMsg = false;

  @override
  void initState() {
    super.initState();
      String msg = "Welcome me in a good manner";
      ChatMessage chatMessage = ChatMessage(
        user: geminiUser,
        createdAt: DateTime.now(),
        text: msg.trim(),
      );
      sendMessage(chatMessage);
      setState(() {
        cnt = 1;
      });
  }

  // instance of Gemini
  final Gemini gemini = Gemini.instance;

  // creating current user
  final ChatUser currentUser = ChatUser(
    id: '0',
    firstName: 'User',
  );

  // creating Gemini user
  final ChatUser geminiUser = ChatUser(
    id: '1',
    firstName: 'Gemini',
  );

  // List to store messages
  List<ChatMessage> messages = <ChatMessage>[];

  // Function to handle user action
  void sendMessage(ChatMessage chatMessage){

    setState(() {
      showSendMsg = true;
    });

    // update the message list
    if(cnt == 1) {
      setState(() {
        ChatMessage message = ChatMessage(user: chatMessage.user,
            createdAt: DateTime.now(),
            text: chatMessage.text.trim());
        messages = [message, ...messages];
      });
    }
    setState(() {
      cnt = 1;
    });

    try{
      String question = chatMessage.text.trim();

      // used to handle Gemini response
      String response = "";

      // generate response stream
      gemini.streamGenerateContent(question).listen((event){
        response = response + " " + event.output.toString();
        ChatMessage? lastMessage = messages.firstOrNull;

        // response generated by geminiuser based of last message to continued the conversation
        if(lastMessage != null && lastMessage.user == geminiUser){
          setState(() {
            lastMessage.text =  response;
          });
        }
        else{
          String response = event.content?.parts?.fold("", (previous,current) => "$previous$current") ?? "";
          ChatMessage message = ChatMessage(user: geminiUser, createdAt: DateTime.now(), text: response);
          setState(() {
            messages = [message, ...messages];
          });
        }
        setState(() {
          showSendMsg = false;
        });
      });
    }
    catch(e){
      print("Error in getting response message : $e",);
    }
  }

  // create a logout button which leads to login page
  // clear shared preference and Firestore authentication
  void _logout(BuildContext context) async{
    await AuthService().logout();
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => Login()),
    );
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Align(
          alignment: Alignment.centerLeft,
          child: Text(
            'Chat With Us!',
            style: TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 22,
              color: Colors.white,
            ),
          ),
        ),
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF00C6FF), Color(0xFF0072FF)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
        elevation: 4,
        actions: [
          IconButton(
            icon: const Icon(Icons.logout, color: Colors.white),
            onPressed: () => _logout(context),
          ),
        ],
      ),
      body: Stack(
        children: [
          Container(
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                colors: [Color(0xFFF1F9FF), Color(0xFFE6F4F1)],
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
              ),
            ),
          ),

          DashChat(
            currentUser: currentUser,
            onSend: sendMessage,
            messages: messages,
            messageOptions: MessageOptions(
              marginDifferentAuthor: EdgeInsets.symmetric(vertical: 5,horizontal: 0),
              containerColor: Colors.white,
              currentUserContainerColor: const Color(0xFF0072FF),
              textColor: Colors.black,
              currentUserTextColor: Colors.white,
              borderRadius: 20,
            ),
            inputOptions: InputOptions(
              inputDecoration: InputDecoration(
                hintText: "Type your message...",
                hintStyle: const TextStyle(color: Colors.grey),
                fillColor: Colors.white,
                filled: true,
                contentPadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(30),
                  borderSide: BorderSide.none,
                ),
              ),
              alwaysShowSend: false,
                inputDisabled: showSendMsg  // could be a solution
            ),
          ),
        ],
      ),
    );
  }

}


